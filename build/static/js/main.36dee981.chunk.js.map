{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","am4core","am4themes_animated","App","React","useState","setChart","useEffect","map","am4maps","geodata","am4geodata_usaLow","projection","AlbersUsa","polygonSeries","series","push","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","data","id","value","fill","propertyFields","imageSeries","imageSeriesTemplate","mapImages","circle","createChild","radius","stroke","strokeWidth","nonScaling","latitude","longitude","title","dispose","style","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,mLCS3CC,IAAiBC,KAiFFC,MA/Ef,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACCC,GADD,WA4Eb,OAzEAC,qBAAU,WACR,IAAIC,EAAMP,IAAe,WAAYQ,KAErCD,EAAIE,QAAUC,IAGdH,EAAII,WAAa,IAAIH,IAAoBI,UAGzC,IAAIC,EAAgBN,EAAIO,OAAOC,KAAK,IAAIP,KACxCK,EAAcG,YAAa,EAG3B,IAAIC,EAAkBJ,EAAcK,YAAYC,SAChDF,EAAgBG,YAAc,kBAG9BP,EAAcQ,KAAO,CACnB,CACEC,GAAI,QACJC,MAAO,IACPC,KAAMxB,IAAc,YAEtB,CACEsB,GAAI,QACJC,MAAO,GACPC,KAAMxB,IAAc,aAKxBiB,EAAgBQ,eAAeD,KAAO,OAGtC,IAAIE,EAAcnB,EAAIO,OAAOC,KAAK,IAAIP,KAClCmB,EAAsBD,EAAYE,UAAUT,SAC5CU,EAASF,EAAoBG,YAAY9B,KAkC7C,OAjCA6B,EAAOE,OAAS,EAChBF,EAAOL,KAAOxB,IAAc,WAC5B6B,EAAOG,OAAShC,IAAc,WAC9B6B,EAAOI,YAAc,EACrBJ,EAAOK,YAAa,EACpBL,EAAOT,YAAc,UAGrBO,EAAoBF,eAAeU,SAAW,WAC9CR,EAAoBF,eAAeW,UAAY,YAG/CV,EAAYL,KAAO,CACjB,CACEc,SAAU,QACVC,WAAY,QACZC,MAAO,QAET,CACEF,SAAU,GACVC,WAAY,IACZC,MAAO,UAET,CACEF,SAAU,GACVC,WAAY,IACZC,MAAO,WAMXhC,EAASE,GACF,kBAAMA,EAAI+B,aAChB,IAEI,yBAAKhB,GAAG,WAAWiB,MAAO,CAAEC,MAAO,OAAQC,OAAQ,YC3ExCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36dee981.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\n\nam4core.useTheme(am4themes_animated);\n\nfunction App() {\n  const [chart, setChart] = React.useState({});\n\n  useEffect(() => {\n    let map = am4core.create(\"chartdiv\", am4maps.MapChart);\n    // Set map definition\n    map.geodata = am4geodata_usaLow;\n\n    // Set projection\n    map.projection = new am4maps.projections.AlbersUsa();\n\n    // Create map polygon series\n    var polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.useGeodata = true;\n\n    // Configure series\n    var polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name} {value} \";\n\n    // Add some data\n    polygonSeries.data = [\n      {\n        id: \"US-TX\",\n        value: 100,\n        fill: am4core.color(\"#F05C5C\")\n      },\n      {\n        id: \"US-MT\",\n        value: 50,\n        fill: am4core.color(\"#5C5CFF\")\n      }\n    ];\n\n    // Bind \"fill\" property to \"fill\" key in data\n    polygonTemplate.propertyFields.fill = \"fill\";\n\n    // Create a circle image in image series template so it gets replicated to all new images\n    let imageSeries = map.series.push(new am4maps.MapImageSeries());\n    var imageSeriesTemplate = imageSeries.mapImages.template;\n    var circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 4;\n    circle.fill = am4core.color(\"#B27799\");\n    circle.stroke = am4core.color(\"#FFFFFF\");\n    circle.strokeWidth = 2;\n    circle.nonScaling = true;\n    circle.tooltipText = \"{title}\";\n\n    // Set property fields\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n\n    // Add data for the three cities\n    imageSeries.data = [\n      {\n        latitude: 31.9686,\n        longitude: -99.9018,\n        title: \"Demo\"\n      },\n      {\n        latitude: 32,\n        longitude: -102,\n        title: \"Demo 2\"\n      },\n      {\n        latitude: 31,\n        longitude: -101,\n        title: \"Demo 3\"\n      }\n    ];\n\n    // ... chart code goes here ...\n\n    setChart(map);\n    return () => map.dispose();\n  }, []);\n\n  return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"800px\" }}></div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}